"""
–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ Python (–æ–¥–∏–Ω —Ñ–∞–π–ª).
–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ (Vosk/Whisper/Google SpeechRecognition)
- —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ (pyttsx3)
- —Ä–µ—à–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á (sympy)
- –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π/—Ñ–∞–π–ª–æ–≤
- —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—É–¥–∏–ª—å–Ω–∏–∫–∞ (–ª–æ–∫–∞–ª—å–Ω–æ)
- –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ LLM (Ollama/Transformers)
- —É–º–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
- –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ):
   pip install -r requirements.txt
   (—Å–º. —Å–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤–Ω–∏–∑—É —Ñ–∞–π–ª–∞)

2) –ó–∞–ø—É—Å—Ç–∏—Ç–µ:
   python voice_assistant.py

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Å–∫—Ä–∏–ø—Ç –Ω–∞–ø–∏—Å–∞–Ω —Ç–∞–∫, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ñ—Ñ–ª–∞–π–Ω —á–µ—Ä–µ–∑ Vosk (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏. –ï—Å–ª–∏ Vosk –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
–ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É speech_recognition —Å –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å–æ–º Google.

–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –∫–æ–º–∞–Ω–¥–∞ '—Ä–µ—à–∏' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç sympy / –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ü–µ–Ω–∫—É –≤—ã—Ä–∞–∂–µ–Ω–∏–π.
–ù–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.

"""

import os
import sys
import platform
import subprocess
import threading
import time
import queue
import re
from datetime import datetime, timedelta

# --- TTS (offline) ---
def init_tts():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏."""
    try:
        import pyttsx3
        engine = pyttsx3.init()
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ–ª–æ—Å–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        voices = engine.getProperty('voices')
        for voice in voices:
            if 'russian' in voice.name.lower() or 'ru' in voice.id.lower():
                engine.setProperty('voice', voice.id)
                break
        return engine
    except Exception as e:
        print("pyttsx3 –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω:", e)
        return None

tts_engine = init_tts()


def speak(text: str):
    """–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏. –ï—Å–ª–∏ pyttsx3 –µ—Å—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –ø–µ—á–∞—Ç–∞–µ–º."""
    print("Assistant:", text)
    if tts_engine:
        try:
            tts_engine.say(text)
            tts_engine.runAndWait()
        except Exception as e:
            print("–û—à–∏–±–∫–∞ TTS:", e)

# --- ASR (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏) ---
# –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Vosk (offline). –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º speech_recognition + Google.
ASR_BACKEND = None

try:
    from vosk import Model, KaldiRecognizer
    import sounddevice as sd
    import json
    # –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ Vosk (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å –∏ —É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç—å —Ä—è–¥–æ–º)
    VOSK_MODEL_PATH = "model"  # –ø–æ–º–µ–Ω—è–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if os.path.exists(VOSK_MODEL_PATH):
        vosk_model = Model(VOSK_MODEL_PATH)
        ASR_BACKEND = 'vosk'
    else:
        print("Vosk –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ 'model'. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ñ—Ñ–ª–∞–π–Ω ASR ‚Äî —Å–∫–∞—á–∞–π—Ç–µ –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –º–æ–¥–µ–ª—å.")
except Exception:
    vosk_model = None

if ASR_BACKEND is None:
    try:
        import speech_recognition as sr
        ASR_BACKEND = 'speech_recognition'
    except Exception:
        ASR_BACKEND = None


def listen_vosk(timeout=15):
    """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —Å Vosk. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ None."""
    try:
        q = queue.Queue()
        samplerate = int(sd.query_devices(None, 'input')['default_samplerate'])
        rec = KaldiRecognizer(vosk_model, samplerate)

        print("–ì–æ–≤–æ—Ä–∏—Ç–µ... (Vosk)")
        print("(–ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã)")
        response_text = None
        last_activity = time.time()
        
        with sd.RawInputStream(samplerate=samplerate, blocksize = 8000, dtype='int16', channels=1) as stream:
            start = time.time()
            while True:
                data = stream.read(4000)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–≤—É–∫–∞
                audio_data = data[0]
                audio_level = max(audio_data) if len(audio_data) > 0 else 0
                
                if audio_level > 100:  # –ï—Å—Ç—å –∑–≤—É–∫
                    last_activity = time.time()
                
                if rec.AcceptWaveform(data[0]):
                    res = json.loads(rec.Result())
                    if 'text' in res and res['text'].strip():
                        response_text = res['text']
                        print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {response_text}")
                        break
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    partial = json.loads(rec.PartialResult())
                    if 'partial' in partial and partial['partial'].strip():
                        # –ï—Å—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª—É—à–∞—Ç—å
                        pass
                
                # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 2 —Å–µ–∫—É–Ω–¥ –±–µ–∑ –∑–≤—É–∫–∞ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ä–µ—á–∏
                if time.time() - last_activity > 2.0 and time.time() - start > 1.0:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    res = json.loads(rec.FinalResult())
                    if 'text' in res and res['text'].strip():
                        response_text = res['text']
                        print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ (—á–∞—Å—Ç–∏—á–Ω–æ): {response_text}")
                        break
                
                if time.time() - start > timeout:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã–π
                    res = json.loads(rec.FinalResult())
                    response_text = res.get('text', '')
                    if response_text.strip():
                        print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ (—Ç–∞–π–º–∞—É—Ç): {response_text}")
                        break
                    else:
                        print("–¢–∞–π–º–∞—É—Ç - –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ")
                        return None
                        
        return response_text
    except Exception as e:
        print('Vosk listen error:', e)
        return None


def listen_speech_recognition(timeout=15):
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Google Web Speech API —á–µ—Ä–µ–∑ speech_recognition (–Ω—É–∂–µ–Ω –∏–Ω—Ç–µ—Ä–Ω–µ—Ç)."""
    import speech_recognition as sr
    r = sr.Recognizer()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
    r.energy_threshold = 300  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å –∑–≤—É–∫–∞
    r.dynamic_energy_threshold = True
    r.pause_threshold = 0.8  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ñ—Ä–∞–∑—ã (—Å–µ–∫—É–Ω–¥—ã)
    r.phrase_threshold = 0.3  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ñ—Ä–∞–∑—ã
    r.non_speaking_duration = 0.5  # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ —Ä–µ—á–∏
    
    with sr.Microphone() as source:
        print("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –º–∏–∫—Ä–æ—Ñ–æ–Ω...")
        r.adjust_for_ambient_noise(source, duration=1.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print("–ì–æ–≤–æ—Ä–∏—Ç–µ... (Google ASR)")
        print("(–ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã)")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏ –ª–∏–º–∏—Ç —Ñ—Ä–∞–∑—ã
        audio = r.listen(source, timeout=timeout, phrase_time_limit=30)
    
    try:
        txt = r.recognize_google(audio, language='ru-RU')
        print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {txt}")
        return txt
    except sr.UnknownValueError:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
        return None
    except sr.RequestError as e:
        print(f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}')
        return None
    except Exception as e:
        print('ASR error:', e)
        return None


def setup_microphone():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏."""
    try:
        import speech_recognition as sr
        r = sr.Recognizer()
        
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...")
        with sr.Microphone() as source:
            print("üì¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–æ–ª—á–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏...")
            r.adjust_for_ambient_noise(source, duration=3.0)
            
        print("‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω: {e}")
        return False


def listen():
    """–ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—É—é —Ñ—Ä–∞–∑—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º."""
    print("\nüé§ –ì–æ—Ç–æ–≤ —Å–ª—É—à–∞—Ç—å...")
    
    if ASR_BACKEND == 'vosk' and vosk_model is not None:
        try:
            txt = listen_vosk()
            if txt:
                return txt
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ Vosk: {e}")
    
    if ASR_BACKEND == 'speech_recognition':
        try:
            return listen_speech_recognition()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ speech_recognition: {e}")
    
    # fallback: —á—Ç–µ–Ω–∏–µ –∏–∑ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        print("‚å®Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥")
        return input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ')
    except (EOFError, KeyboardInterrupt):
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}")
        return None

# --- LLM Integration ---
# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö LLM –±–∏–±–ª–∏–æ—Ç–µ–∫
LLM_BACKEND = None
llm_model = None

try:
    import requests
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama
    try:
        response = requests.get('http://localhost:11434/api/tags', timeout=2)
        if response.status_code == 200:
            LLM_BACKEND = 'ollama'
            print("Ollama –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    except:
        pass
except ImportError:
    pass

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - transformers
if LLM_BACKEND is None:
    try:
        from transformers import pipeline, AutoTokenizer, AutoModelForCausalLM  # type: ignore
        LLM_BACKEND = 'transformers'
        print("Transformers –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π LLM")
    except ImportError:
        pass

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ---
from sympy import sympify, Symbol

alarms = []  # —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤


def get_alarms():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤."""
    return [alarm for alarm in alarms if alarm['time'] > datetime.now()]


def remove_alarm(alarm_id: int):
    """–£–¥–∞–ª—è–µ—Ç –±—É–¥–∏–ª—å–Ω–∏–∫ –ø–æ ID."""
    global alarms
    alarms = [alarm for alarm in alarms if alarm['id'] != alarm_id]


def set_alarm(time_str: str, label: str = ''):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—É–¥–∏–ª—å–Ω–∏–∫–∞. time_str ‚Äî –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM –∏–ª–∏ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—ã: 'in 10 minutes' (rus not implemented)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –±—É–¥–∏–ª—å–Ω–∏–∫–∞."""
    try:
        now = datetime.now()
        m = re.match(r"^(\d{1,2}):(\d{2})$", time_str)
        if m:
            hh = int(m.group(1))
            mm = int(m.group(2))
            if not (0 <= hh <= 23 and 0 <= mm <= 59):
                raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {hh:02d}:{mm:02d}")
            alarm_time = now.replace(hour=hh, minute=mm, second=0, microsecond=0)
            if alarm_time <= now:
                alarm_time += timedelta(days=1)
        else:
            # –ø–æ–ø—Ä–æ–±—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç
            m2 = re.match(r"^(\d+)\s*min(ute)?s?$", time_str)
            if m2:
                minutes = int(m2.group(1))
                if minutes <= 0:
                    raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                alarm_time = now + timedelta(minutes=minutes)
            else:
                # –ø–æ–ø—Ä–æc–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ç–æ—á–Ω–∏—Ç—å
                raise ValueError('–ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: ' + time_str)

        alarm = {'time': alarm_time, 'label': label, 'id': len(alarms) + 1}
        alarms.append(alarm)
        # –∑–∞–ø—É—Å—Ç–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ñ–æ–Ω–µ)
        threading.Thread(target=alarm_worker, args=(alarm,), daemon=True).start()
        return alarm['id']
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∞: {str(e)}")


def alarm_worker(alarm):
    now = datetime.now()
    delta = (alarm['time'] - now).total_seconds()
    if delta > 0:
        time.sleep(delta)
    # –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏
    speak(f"–ë—É–¥–∏–ª—å–Ω–∏–∫: {alarm.get('label','–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ‚Äî –≤—Ä–µ–º—è {alarm['time'].strftime('%H:%M')}")
    try:
        # –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –∑–≤—É–∫–æ–≤–æ–π —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        if os.path.exists('alarm_sound.mp3'):
            # –ø—Ä–æ—Å—Ç–æ–π –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±: –æ—Ç–∫—Ä–æ–µ–º —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            open_file('alarm_sound.mp3')
    except Exception as e:
        print('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫:', e)


def find_installed_apps():
    """–ù–∞—Ö–æ–¥–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Windows."""
    apps = {}
    
    if platform.system() != 'Windows':
        return apps
    
    try:
        import winreg
        
        # –ü–æ–∏—Å–∫ –≤ —Ä–µ–µ—Å—Ç—Ä–µ Windows
        registry_paths = [
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"),
            (winreg.HKEY_CURRENT_USER, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"),
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall")
        ]
        
        for hkey, path in registry_paths:
            try:
                with winreg.OpenKey(hkey, path) as key:
                    for i in range(winreg.QueryInfoKey(key)[0]):
                        try:
                            subkey_name = winreg.EnumKey(key, i)
                            with winreg.OpenKey(key, subkey_name) as subkey:
                                try:
                                    display_name = winreg.QueryValueEx(subkey, "DisplayName")[0]
                                    install_location = winreg.QueryValueEx(subkey, "InstallLocation")[0]
                                    display_icon = winreg.QueryValueEx(subkey, "DisplayIcon")[0]
                                    
                                    if display_name and install_location:
                                        # –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç –≤–µ—Ä—Å–∏–π –∏ –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                                        clean_name = re.sub(r'\s+\d+\.\d+.*$', '', display_name)
                                        clean_name = re.sub(r'\s+\(.*?\)', '', clean_name)
                                        
                                        apps[clean_name.lower()] = {
                                            'name': display_name,
                                            'path': install_location,
                                            'icon': display_icon if display_icon else None
                                        }
                                except:
                                    continue
                        except:
                            continue
            except:
                continue
                
    except ImportError:
        print("winreg –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    return apps


def find_start_menu_apps():
    """–ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é –ü—É—Å–∫ Windows."""
    apps = {}
    
    if platform.system() != 'Windows':
        return apps
    
    start_menu_paths = [
        os.path.expanduser(r"~\AppData\Roaming\Microsoft\Windows\Start Menu\Programs"),
        os.path.expanduser(r"~\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\System Tools"),
        r"C:\ProgramData\Microsoft\Windows\Start Menu\Programs",
        r"C:\ProgramData\Microsoft\Windows\Start Menu\Programs\System Tools"
    ]
    
    for start_path in start_menu_paths:
        if os.path.exists(start_path):
            try:
                for root, dirs, files in os.walk(start_path):
                    for file in files:
                        if file.endswith('.lnk'):
                            full_path = os.path.join(root, file)
                            app_name = os.path.splitext(file)[0]
                            
                            # –û—á–∏—â–∞–µ–º –∏–º—è
                            clean_name = re.sub(r'\s+\(.*?\)', '', app_name)
                            clean_name = clean_name.lower()
                            
                            if clean_name not in apps:
                                apps[clean_name] = {
                                    'name': app_name,
                                    'path': full_path,
                                    'type': 'shortcut'
                                }
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ {start_path}: {e}")
    
    return apps


def search_apps_by_name(query: str):
    """–ò—â–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é."""
    query = query.lower().strip()
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    all_apps = {}
    all_apps.update(find_installed_apps())
    all_apps.update(find_start_menu_apps())
    
    # –ü–æ–∏—Å–∫ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    exact_matches = []
    partial_matches = []
    
    for app_key, app_info in all_apps.items():
        app_name = app_info['name'].lower()
        
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if query == app_key or query in app_name:
            exact_matches.append((app_key, app_info))
        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        elif any(word in app_key or word in app_name for word in query.split()):
            partial_matches.append((app_key, app_info))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    results = exact_matches + partial_matches
    return results[:5]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤


def open_file(path_or_app: str):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°."""
    system = platform.system()
    try:
        if system == 'Windows':
            os.startfile(path_or_app)
        elif system == 'Darwin':
            subprocess.Popen(['open', path_or_app])
        else:
            subprocess.Popen(['xdg-open', path_or_app])
        return True
    except Exception as e:
        print('open_file error:', e)
        return False


def safe_eval_math(expr: str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ sympy."""
    try:
        # —É–±–∏—Ä–∞–µ–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        expr = expr.replace('^', '**')
        # sympify –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        res = sympify(expr)
        return str(res)
    except Exception as e:
        return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏: ' + str(e)


def check_llm_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM."""
    status = {
        'ollama': False,
        'transformers': False,
        'active_backend': None
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Ollama
    try:
        import requests
        response = requests.get('http://localhost:11434/api/tags', timeout=2)
        if response.status_code == 200:
            status['ollama'] = True
            if LLM_BACKEND == 'ollama':
                status['active_backend'] = 'ollama'
    except:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º transformers
    try:
        from transformers import pipeline  # type: ignore
        status['transformers'] = True
        if LLM_BACKEND == 'transformers':
            status['active_backend'] = 'transformers'
    except:
        pass
    
    return status


def ask_llm(question: str):
    """–ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ª–æ–∫–∞–ª—å–Ω–æ–π LLM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç."""
    if LLM_BACKEND == 'ollama':
        return ask_ollama(question)
    elif LLM_BACKEND == 'transformers':
        return ask_transformers(question)
    else:
        return "–õ–æ–∫–∞–ª—å–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Ollama –∏–ª–∏ transformers –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."


def smart_app_launch(query: str):
    """–£–º–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏."""
    if not LLM_BACKEND:
        return "–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        found_apps = search_apps_by_name(query)
        
        if not found_apps:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            return ask_llm(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: '{query}'. –ù–æ —è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –µ–≥–æ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ. –ü–æ–¥—Å–∫–∞–∂–∏, –∫–∞–∫ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –æ–¥–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
        if len(found_apps) == 1:
            app_key, app_info = found_apps[0]
            app_path = app_info['path']
            
            if open_file(app_path):
                return f"–ó–∞–ø—É—Å–∫–∞—é {app_info['name']}"
            else:
                return f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å {app_info['name']}"
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –≤—ã–±–æ—Ä–∞
        apps_list = "\n".join([f"{i+1}. {app_info['name']}" for i, (_, app_info) in enumerate(found_apps)])
        
        prompt = f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "{query}"

–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
{apps_list}

–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (1-{len(found_apps)}) –∏–ª–∏ –æ—Ç–≤–µ—Ç—å "–Ω–µ –∑–Ω–∞—é" –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç."""
        
        response = ask_llm(prompt)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –∏–∑ –æ—Ç–≤–µ—Ç–∞
        import re
        numbers = re.findall(r'\d+', response)
        if numbers:
            try:
                choice = int(numbers[0]) - 1
                if 0 <= choice < len(found_apps):
                    app_key, app_info = found_apps[choice]
                    app_path = app_info['path']
                    
                    if open_file(app_path):
                        return f"–ó–∞–ø—É—Å–∫–∞—é {app_info['name']}"
                    else:
                        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å {app_info['name']}"
            except:
                pass
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –≤—ã–±–æ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        return f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {apps_list}. –°–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–µ–µ, –∫–∞–∫–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å."
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}"


def ask_ollama(question: str):
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Ollama –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."""
    try:
        import requests
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞
        system_prompt = """–¢—ã —É–º–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. 
        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, 
        –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏. –ï—Å–ª–∏ —ç—Ç–æ –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å - –¥–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç.
        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ø–æ–º–æ–≥–∏ –Ω–∞–π—Ç–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ."""
        
        payload = {
            "model": "llama3.2",  # –∏–ª–∏ –¥—Ä—É–≥–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å
            "prompt": f"{system_prompt}\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}",
            "stream": False,
            "options": {
                "temperature": 0.7,
                "max_tokens": 200
            }
        }
        
        response = requests.post('http://localhost:11434/api/generate', 
                               json=payload, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            return result.get('response', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏')
        else:
            return f"–û—à–∏–±–∫–∞ Ollama: {response.status_code}"
            
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Ollama: {str(e)}"


def ask_transformers(question: str):
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç transformers –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."""
    global llm_model
    
    try:
        if llm_model is None:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–µ–≥–∫—É—é –º–æ–¥–µ–ª—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            model_name = "microsoft/DialoGPT-medium"  # –∏–ª–∏ –¥—Ä—É–≥–∞—è –ø–æ–¥—Ö–æ–¥—è—â–∞—è –º–æ–¥–µ–ª—å
            llm_model = pipeline("text-generation", model=model_name, 
                               tokenizer=model_name, max_length=150)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {question}\n–ü–æ–º–æ—â–Ω–∏–∫:"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = llm_model(prompt, max_length=len(prompt.split()) + 50, 
                           num_return_sequences=1, temperature=0.7, 
                           pad_token_id=llm_model.tokenizer.eos_token_id)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
        generated_text = response[0]['generated_text']
        answer = generated_text.split("–ü–æ–º–æ—â–Ω–∏–∫:")[-1].strip()
        
        return answer if answer else "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç"
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å transformers: {str(e)}"


def parse_command(text: str):
    """–ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø–∞—Ä—Å–µ—Ä –∫–æ–º–∞–Ω–¥. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (intent, data).
    intents: open_app, set_alarm, solve_math, quit, help, show_alarms, unknown
    """
    t = text.lower().strip()
    # quit
    if t in ('–≤—ã—Ö–æ–¥', '–≤—ã–π—Ç–∏', '—Å—Ç–æ–ø', 'quit', 'exit','—Ö–≤–∞—Ç–∏—Ç'):
        return ('quit', None)
    # help
    if '–ø–æ–º–æ—â—å' in t or '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å' in t:
        return ('help', None)
    # –ø–æ–∫–∞–∑–∞—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫–∏
    if any(word in t for word in ['–±—É–¥–∏–ª—å–Ω–∏–∫–∏', 'alarms', '—Å–ø–∏—Å–æ–∫ –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤']):
        return ('show_alarms', None)
    # –ø–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è
    if any(word in t for word in ['–≤—Ä–µ–º—è', 'time', '—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏']):
        return ('show_time', None)
    # –≤–æ–ø—Ä–æ—Å –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    if any(word in t for word in ['—Å–ø—Ä–æ—Å–∏', 'ask', '—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫–∞–∫', '–ø–æ—á–µ–º—É', '—Ä–∞—Å—Å–∫–∞–∂–∏']):
        return ('ask_llm', text)
    # —Å—Ç–∞—Ç—É—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    if any(word in t for word in ['—Å—Ç–∞—Ç—É—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏', '—Å—Ç–∞—Ç—É—Å llm', '–ø—Ä–æ–≤–µ—Ä—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å']):
        return ('check_llm', None)
    # –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ / —Ñ–∞–π–ª
    m_open = re.search(r"(?:–æ—Ç–∫—Ä–æ–π|–∑–∞–ø—É—Å—Ç–∏|open|start)\s+(.+)", t)
    if m_open:
        target = m_open.group(1).strip()
        return ('open_app', target)
    # —É–º–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
    if any(phrase in t for phrase in ['–Ω–∞–π–¥–∏ –∏ –∑–∞–ø—É—Å—Ç–∏', '–Ω–∞–π–¥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–∑–∞–ø—É—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É', '–æ—Ç–∫—Ä–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—É']):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app_name = t
        for phrase in ['–Ω–∞–π–¥–∏ –∏ –∑–∞–ø—É—Å—Ç–∏', '–Ω–∞–π–¥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–∑–∞–ø—É—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É', '–æ—Ç–∫—Ä–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—É']:
            if phrase in app_name:
                app_name = app_name.replace(phrase, '').strip()
                break
        return ('smart_launch', app_name)
    # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫
    m_alarm = re.search(r"(?:–±—É–¥–∏–ª—å–Ω–∏–∫|–ø–æ—Å—Ç–∞–≤—å –±—É–¥–∏–ª—å–Ω–∏–∫|—É—Å—Ç–∞–Ω–æ–≤–∏ –±—É–¥–∏–ª—å–Ω–∏–∫)\s*(?:–Ω–∞)?\s*(\d{1,2}:\d{2})", t)
    if m_alarm:
        return ('set_alarm', m_alarm.group(1))
    m_alarm2 = re.search(r"(?:—á–µ—Ä–µ–∑)\s*(\d+)\s*(?:–º–∏–Ω—É—Ç)", t)
    if m_alarm2:
        mins = m_alarm2.group(1)
        return ('set_alarm', f"{mins}min")
    # math
    m_math = re.search(r"(?:—Ä–µ—à–∏|–ø–æ—Å—á–∏—Ç–∞–π|calculate|compute|solve)\s+(.+)", t)
    if m_math:
        expr = m_math.group(1)
        return ('solve_math', expr)
    # –ø—Ä–æ—Å—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    if re.match(r"^[0-9\s\+\-\*\/%\(\)\.\^e]+$", t):
        return ('solve_math', t)
    return ('unknown', text)


def handle_command(intent, data):
    if intent == 'quit':
        speak('–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!')
        sys.exit(0)
    if intent == 'help':
        speak('–Ø –º–æ–≥—É: —Ä–µ—à–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —Å—Ç–∞–≤–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, —É–º–Ω–æ –∏—Å–∫–∞—Ç—å –∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ. –°–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∏–º–µ—Ä: "–æ—Ç–∫—Ä–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" –∏–ª–∏ "–Ω–∞–π–¥–∏ –∏ –∑–∞–ø—É—Å—Ç–∏ Chrome" –∏–ª–∏ "–ø–æ—Å—Ç–∞–≤—å –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ 07:30" –∏–ª–∏ "—á—Ç–æ —Ç–∞–∫–æ–µ Python"')
        return
    if intent == 'show_alarms':
        active_alarms = get_alarms()
        if not active_alarms:
            speak('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤')
        else:
            alarm_list = ', '.join([f"–Ω–æ–º–µ—Ä {alarm['id']} –Ω–∞ {alarm['time'].strftime('%H:%M')}" for alarm in active_alarms])
            speak(f'–ê–∫—Ç–∏–≤–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏: {alarm_list}')
        return
    if intent == 'show_time':
        current_time = datetime.now().strftime('%H:%M')
        speak(f'–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}')
        return
    if intent == 'ask_llm':
        question = data
        speak('–î—É–º–∞—é...')
        answer = ask_llm(question)
        speak(answer)
        return
    if intent == 'smart_launch':
        app_query = data
        speak('–ò—â—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...')
        result = smart_app_launch(app_query)
        speak(result)
        return
    if intent == 'check_llm':
        status = check_llm_status()
        if status['active_backend']:
            speak(f'–ù–µ–π—Ä–æ—Å–µ—Ç—å –∞–∫—Ç–∏–≤–Ω–∞: {status["active_backend"]}')
        else:
            available = []
            if status['ollama']:
                available.append('Ollama')
            if status['transformers']:
                available.append('Transformers')
            
            if available:
                speak(f'–î–æ—Å—Ç—É–ø–Ω–æ: {", ".join(available)}, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ')
            else:
                speak('–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Ollama –∏–ª–∏ transformers')
        return
    if intent == 'open_app':
        target = data
        speak(f'–ü—ã—Ç–∞—é—Å—å –æ—Ç–∫—Ä—ã—Ç—å {target}')
       
        # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–∞–ø–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –û–° ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏
        known = {
            '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä': {
                'Windows': 'calc.exe',
                'Darwin': 'open -a Calculator',
                'Linux': 'gnome-calculator'
            },
            '–±–ª–æ–∫–Ω–æ—Ç': {
                'Windows': 'notepad.exe',
                'Darwin': 'open -a TextEdit',
                'Linux': 'gedit'
            },
            # –ë—Ä–∞—É–∑–µ—Ä—ã
            'Google': {
                'Windows': ['chrome.exe', 'google-chrome.exe', 'Google Chrome'],
                'Darwin': 'open -a "Google Chrome"',
                'Linux': ['google-chrome', 'chromium-browser']
            },
            'Chrome': {
                'Windows': ['chrome.exe', 'google-chrome.exe', 'Google Chrome'],
                'Darwin': 'open -a "Google Chrome"',
                'Linux': ['google-chrome', 'chromium-browser']
            },
            'Firefox': {
                'Windows': 'firefox.exe',
                'Darwin': 'open -a Firefox',
                'Linux': 'firefox'
            },
            # –ò–≥—Ä—ã (—Ç–æ–ª—å–∫–æ Windows, —Ç–∞–∫ –∫–∞–∫ –ø—É—Ç–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã)
            'cs': {
                'Windows': [
                    r'C:\Program Files (x86)\Steam\steamapps\common\Counter-Strike Global Offensive\game\bin\win64\cs2.exe',
                    r'C:\Program Files\Steam\steamapps\common\Counter-Strike Global Offensive\game\bin\win64\cs2.exe'
                ]
            },
            '–∫—Å –≥–æ': {
                'Windows': [
                    r'C:\Program Files (x86)\Steam\steamapps\common\Counter-Strike Global Offensive\game\bin\win64\cs2.exe',
                    r'C:\Program Files\Steam\steamapps\common\Counter-Strike Global Offensive\game\bin\win64\cs2.exe'
                ]
            },
            'dota': {
                'Windows': [
                    r'C:\Program Files (x86)\Steam\steamapps\common\dota 2 beta\game\bin\win64\dota2.exe',
                    r'C:\Program Files\Steam\steamapps\common\dota 2 beta\game\bin\win64\dota2.exe'
                ]
            },
            '–≤–∞–ª–æ—Ä–∞–Ω—Ç': {
                'Windows': [
                    r'C:\Riot Games\Riot Client\RiotClientServices.exe',
                    r'C:\Users\%USERNAME%\AppData\Local\Riot Games\Riot Client\RiotClientServices.exe'
                ]
            },
            'riot': {
                'Windows': [
                    r'C:\Riot Games\Riot Client\RiotClientServices.exe',
                    r'C:\Users\%USERNAME%\AppData\Local\Riot Games\Riot Client\RiotClientServices.exe'
                ]
            }
        }
        system = platform.system()
        if target in known:
            apps = known[target].get(system)
            if apps:
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π, –ø—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π
                if isinstance(apps, list):
                    for app in apps:
                        # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ø—É—Ç–∏
                        expanded_app = os.path.expandvars(app)
                        if os.path.exists(expanded_app) or app in ['chrome.exe', 'firefox.exe', 'notepad.exe', 'calc.exe']:
                            ok = open_file(expanded_app)
                            if ok:
                                speak('–û—Ç–∫—Ä—ã—Ç–æ')
                                return
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                    expanded_app = os.path.expandvars(apps)
                    ok = open_file(expanded_app)
                    if ok:
                        speak('–û—Ç–∫—Ä—ã—Ç–æ')
                        return
        # –ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–∫ –ø—É—Ç—å
        if os.path.exists(target):
            if open_file(target):
                speak('–§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç')
                return
        # –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞
        try:
            subprocess.Popen(target.split())
            speak('–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')
            return
        except Exception as e:
            speak('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å ' + target)
            print(e)
            return
    if intent == 'set_alarm':
        time_spec = data
        try:
            alarm_id = set_alarm(time_spec, label='–ì–æ–ª–æ—Å–æ–≤–æ–π –±—É–¥–∏–ª—å–Ω–∏–∫')
            speak(f'–ë—É–¥–∏–ª—å–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {alarm_id}')
        except Exception as e:
            speak('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫: ' + str(e))
        return
    if intent == 'solve_math':
        expr = data
        speak('–í—ã—á–∏—Å–ª—è—é...')
        res = safe_eval_math(expr)
        speak('–†–µ–∑—É–ª—å—Ç–∞—Ç: ' + res)
        return
    if intent == 'unknown':
        # –ü–æ–ø—Ä–æ–±—É–µ–º —É–º–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
        if LLM_BACKEND:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            if any(word in data.lower() for word in ['–∑–∞–ø—É—Å—Ç–∏', '–æ—Ç–∫—Ä–æ–π', '–Ω–∞–π–¥–∏', '–∑–∞–ø—É—Å–∫', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–ø—Ä–æ–≥—Ä–∞–º–º–∞']):
                speak('–ü–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...')
                result = smart_app_launch(data)
                speak(result)
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞, –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
                speak('–ü–æ–ø—Ä–æ–±—É—é —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è...')
                answer = ask_llm(data)
                speak(answer)
        else:
            speak('–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ "–ø–æ–º–æ—â—å". –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Ollama –∏–ª–∏ transformers.')
        return

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ---

def main_loop():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    setup_microphone()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å LLM –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if LLM_BACKEND:
        speak(f'–ì–æ—Ç–æ–≤. –ù–µ–π—Ä–æ—Å–µ—Ç—å –∞–∫—Ç–∏–≤–Ω–∞: {LLM_BACKEND}. –°–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.')
        print("üí° –°–æ–≤–µ—Ç: –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ, –¥–µ–ª–∞–π—Ç–µ –ø–∞—É–∑—ã –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏")
        print("üí° –ü–æ–º–æ—â–Ω–∏–∫ –∂–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∞—à–µ–π —Ñ—Ä–∞–∑—ã –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º")
    else:
        speak('–ì–æ—Ç–æ–≤. –°–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.')
        print("üí° –°–æ–≤–µ—Ç: –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ, –¥–µ–ª–∞–π—Ç–µ –ø–∞—É–∑—ã –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏")
    
    print("\n" + "="*50)
    print("üé§ –ì–û–õ–û–°–û–í–û–ô –ü–û–ú–û–©–ù–ò–ö –ó–ê–ü–£–©–ï–ù")
    print("üí¨ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("   ‚Ä¢ '–æ—Ç–∫—Ä–æ–π Chrome' - –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
    print("   ‚Ä¢ '–Ω–∞–π–¥–∏ –∏ –∑–∞–ø—É—Å—Ç–∏ Steam' - —É–º–Ω—ã–π –ø–æ–∏—Å–∫")
    print("   ‚Ä¢ '—á—Ç–æ —Ç–∞–∫–æ–µ Python?' - –≤–æ–ø—Ä–æ—Å—ã –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")
    print("   ‚Ä¢ '–ø–æ—Å—Ç–∞–≤—å –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ 07:30' - –±—É–¥–∏–ª—å–Ω–∏–∫–∏")
    print("   ‚Ä¢ '–ø–æ–º–æ—â—å' - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
    print("   ‚Ä¢ '–≤—ã—Ö–æ–¥' - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
    print("="*50 + "\n")
    
    while True:
        try:
            txt = listen()
            if not txt:
                speak('–Ø –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')
                continue
            
            print(f'üó£Ô∏è –í—ã —Å–∫–∞–∑–∞–ª–∏: "{txt}"')
            intent, data = parse_command(txt)
            handle_command(intent, data)
            
            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ–º
            print("\n" + "-"*30)
            
        except KeyboardInterrupt:
            speak('–í—ã—Ö–æ–¥')
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print('–û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞:', e)
            speak('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + str(e))


if __name__ == '__main__':
    main_loop()


# -----------------------------
# Requirements (—Ñ–∞–π–ª requirements.txt):
# pyttsx3
# sympy
# speechrecognition
# vosk
# sounddevice
# pyaudio
# requests
# transformers
# torch
# -----------------------------
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ LLM:
# ‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù–û:
# - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Ollama (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
# - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Transformers (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
# - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–µ–Ω–¥–æ–≤
# - –ö–æ–º–∞–Ω–¥—ã: "—á—Ç–æ —Ç–∞–∫–æ–µ...", "–∫–∞–∫...", "–ø–æ—á–µ–º—É...", "—Ä–∞—Å—Å–∫–∞–∂–∏..."
# - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: "–ø—Ä–æ–≤–µ—Ä—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å"
# - Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
#
# –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:
# ‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù–û:
# - –ü–æ–∏—Å–∫ –≤ —Ä–µ–µ—Å—Ç—Ä–µ Windows (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã)
# - –ü–æ–∏—Å–∫ –≤ –º–µ–Ω—é –ü—É—Å–∫ (—è—Ä–ª—ã–∫–∏)
# - –£–º–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
# - –ö–æ–º–∞–Ω–¥—ã: "–Ω–∞–π–¥–∏ –∏ –∑–∞–ø—É—Å—Ç–∏...", "–æ—Ç–∫—Ä–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—É..."
# - –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∑–∞–ø—É—Å–∫–∞
# - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø—Ä–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
# 
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama:
# 1. –°–∫–∞—á–∞—Ç—å —Å https://ollama.ai
# 2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å: ollama pull llama3.2
# 3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–º–æ—â–Ω–∏–∫–∞
# 
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Transformers:
# pip install transformers torch
# 
# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: python test_llm.py
# -----------------------------
